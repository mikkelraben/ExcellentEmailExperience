name: WinUI 3 MSIX app
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: ExcellentEmailExperience.sln   # Replace with your solution name, i.e. App1.sln.
      MSIX_FILE: ExcellentEmailExperience-${{ matrix.platform }}-${{ matrix.configuration }}.msix
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

      

    - name: Build Test
      uses: Azure/powershell@v2
      with:
        # Specify the Az PowerShell script here.
        inlineScript:  msbuild /restore /t:Build Test/Test.csproj /p:Configuration=Release /p:Platform=x64
        azPSVersion: latest
        
    - name: Run Test
      run: dotnet test Test\bin\x64\Release\net8.0-windows10.0.19041.0\win-x64\Test.dll
    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:GenerateAppxPackageOnBuild=true /p:MsixName=$env:MSIX_FILE
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    - name: Sign Package
      uses: Azure/powershell@v2
      with:
        # Specify the Az PowerShell script here.
        inlineScript: $AppBundle = Get-ChildItem -Filter ExcellentEmailExperience*Test -Name;cd $AppBundle; $MsixName = Get-ChildItem -Filter ExcellentEmailExperience*.msix -Name; & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe" sign /fd SHA256 /a /f ../GitHubActionsWorkflow.pfx /p "${{ secrets.PFX_KEY }}" $MsixName
        azPSVersion:  latest
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ExcellentEmailExperience*Test/ExcellentEmailExperience*.msix
